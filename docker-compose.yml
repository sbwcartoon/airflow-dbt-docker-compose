version: '3.9'

x-dbt-common:
  &dbt-common
  build:
    context: ./dbt
    args:
      SSH_ID: ${SSH_ID}
      SSH_PASSWORD: ${SSH_PASSWORD}
  environment:
    &dbt-common-env
    DBT_TARGET: ${DBT_TARGET}
    LOCAL_ANALYTICS_POSTGRES_USER: ${LOCAL_ANALYTICS_POSTGRES_USER}
    LOCAL_ANALYTICS_POSTGRES_PASSWORD: ${LOCAL_ANALYTICS_POSTGRES_PASSWORD}
    LOCAL_ANALYTICS_POSTGRES_HOST: ${LOCAL_ANALYTICS_POSTGRES_HOST}
    LOCAL_ANALYTICS_POSTGRES_PORT: ${LOCAL_ANALYTICS_POSTGRES_PORT}
    LOCAL_ANALYTICS_POSTGRES_DB: ${LOCAL_ANALYTICS_POSTGRES_DB}
    LOCAL_ANALYTICS_POSTGRES_DEFAULT_SCHEMA: ${LOCAL_ANALYTICS_POSTGRES_DEFAULT_SCHEMA}
    PROD_ANALYTICS_POSTGRES_USER: ${PROD_ANALYTICS_POSTGRES_USER}
    PROD_ANALYTICS_POSTGRES_PASSWORD: ${PROD_ANALYTICS_POSTGRES_PASSWORD}
    PROD_ANALYTICS_POSTGRES_HOST: ${PROD_ANALYTICS_POSTGRES_HOST}
    PROD_ANALYTICS_POSTGRES_PORT: ${PROD_ANALYTICS_POSTGRES_PORT}
    PROD_ANALYTICS_POSTGRES_DB: ${PROD_ANALYTICS_POSTGRES_DB}
    PROD_ANALYTICS_POSTGRES_DEFAULT_SCHEMA: ${PROD_ANALYTICS_POSTGRES_DEFAULT_SCHEMA}
  volumes:
    - ./dbt:/usr/app
    - ./dbt/ssh_host_keys/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key
    - ./dbt/ssh_host_keys/ssh_host_rsa_key.pub:/etc/ssh/ssh_host_rsa_key.pub

x-airflow-common:
  &airflow-common
  build:
    context: ./airflow
  environment:
    &airflow-common-env
    <<: *dbt-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_META_DB}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8082/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW__LOGGING__LOGGING_LEVEL: WARNING
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Seoul
    SOURCE_POSTGRES_SCHEMA: ${SOURCE_POSTGRES_SCHEMA}
    DBT_TARGET: ${DBT_TARGET}
    AIRFLOW_CONN_SOURCE_DB: ${AIRFLOW_CONN_SOURCE_DB}
    AIRFLOW_CONN_ANALYTICS_DB: ${AIRFLOW_CONN_ANALYTICS_DB}
    SSH_CONN_ID: ${SSH_CONN_ID}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-./airflow}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-./airflow}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-./airflow}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-./airflow}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"

x-airflow-common-depends-on:
  depends_on:
    &airflow-common-depends-on
    airflow-init:
      condition: service_completed_successfully

services:
  airflow-apiserver:
    <<: *airflow-common
    container_name: airflow-apiserver-dbt-simple
    ports:
      - "8082:8082"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8082/api/v2/version" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    depends_on:
      <<: *airflow-common-depends-on
    command: api-server --port 8082

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler-dbt-simple
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure
    depends_on:
      <<: *airflow-common-depends-on
    command: scheduler

  airflow-dag-processor:
    <<: *airflow-common
    container_name: airflow-dag-processor-dbt-simple
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure
    depends_on:
      <<: *airflow-common-depends-on
    command: dag-processor

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer-dbt-simple
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure
    depends_on:
      <<: *airflow-common-depends-on
    command: triggerer

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init-dbt-simple
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli-dbt-simple
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    depends_on:
      <<: *airflow-common-depends-on
    command:
      - bash
      - -c
      - airflow

  init-airflow-dbt-ssh-connections:
    <<: *airflow-common
    container_name: init-airflow-dbt-ssh-connections-dbt-simple
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      dbt:
        condition: service_healthy
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo 'Waiting for Airflow Api Server...';
        airflow connections add '${SSH_CONN_ID}' \
          --conn-json '{
              "conn_type": "ssh",
              "login": "${SSH_ID}",
              "password": "${SSH_PASSWORD}",
              "host": "dbt",
              "port": 22,
              "extra": {
                  "host_key": "${SSH_HOST_KEY}"
              }
          }';
        echo 'SSH Connection added.';
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    user: "0:0"

  dbt:
    <<: *dbt-common
    container_name: dbt-simple
    healthcheck:
      test: [ "CMD", "test", "-d", "/usr/app/dbt_packages" ]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: /bin/bash
    command:
      - -c
      - |
        dbt deps
        exec /usr/sbin/sshd -D

  dbt-docs:
    <<: *dbt-common
    container_name: dbt-docs-dbt-simple
    depends_on:
      dbt:
        condition: service_healthy
    ports:
      - "8085:8085"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        dbt docs generate
        dbt docs serve --port 8085 --no-browser --host 0.0.0.0
